//-----------------------------------------------------------------------------
// Entaro ChucK Developer!
// This is a Chugin boilerplate, generated by chugerate!
//-----------------------------------------------------------------------------



#define __PLATFORM_MACOSX__
// this should align with the correct versions of these ChucK files
#include "chuck_dl.h"
#include "chuck_def.h"
#include "chuck_type.h"
#include "chuck_instr.h"

// general includes
#include <stdio.h>
#include <limits.h>
#include <string>
#include <iostream>
#include "managerHandler.h"


// declaration of chugin constructor
CK_DLL_CTOR(chuckjour_ctor);
// declaration of chugin desctructor
CK_DLL_DTOR(chuckjour_dtor);

// example of getter/setter
CK_DLL_MFUN(chuckjour_setParam);
CK_DLL_MFUN(chuckjour_getParam);
CK_DLL_MFUN(chuckjour_getInport);
CK_DLL_MFUN(chuckjour_createInport);
CK_DLL_MFUN(chuckjour_getOutport);
CK_DLL_MFUN(chuckjour_getOutAddressString);
CK_DLL_MFUN(chuckjour_setMyName);

// for Chugins extending UGen, this is mono synthesis function for 1 sample
//CK_DLL_TICK(chuckjour_tick);

// this is a special offset reserved for Chugin internal data
t_CKINT chuckjour_data_offset = 0;


// class definition for internal Chugin data
// (note: this isn't strictly necessary, but serves as example
// of one recommended approach)
class Chuckjour 
{
public:
    
    c_str outputString;
    
    // constructor
    Chuckjour( t_CKFLOAT fs)
    {
       
        myName = "ChuckJour";
        m_param = 0;
        outPort1 = 12;
        manager = [[managerHandler alloc] init];
        
        
        [manager inPort:[NSString stringWithUTF8String:myName] : 8027];
        [manager setupManualOutPort];

        
        printf ("Constructor called \n");
        

        

    }
    

            // for Chugins extending UGen
            /*
             SAMPLE tick( SAMPLE in )
             {
             // default: this passes whatever input is patched into Chugin
             return in;
             }
             */
            // set parameter example
            float setParam( t_CKFLOAT p )
            {
                m_param = p;
                return p;
            }
    
        int getOutport(int thePort)
        {
            NSArray * list = [manager returnListOfOutputs];
            for (int i = 0; i < [list count]; i++){
                OSCOutPort * o = [list objectAtIndex:i];
                NSLog(@"%@",o.portLabel);
                NSLog(@"%@",o.addressString);
                
                NSLog(@"%d",o.port);
            }
            outPort1 = [manager returnOutport:thePort];
            
        return outPort1;
        }
    
    int getInport(t_CKINT thePort)
    {

        outPort1 = [manager returnInport:thePort];
        return outPort1;
    }
    
    int createInport(t_CKINT portNum){
        NSString *g = [NSString stringWithFormat:@"Timport %ld",portNum ];
        [manager inPort:g :portNum ];
        [manager returnListOfInputs];
        return portNum;
    }
    
    void getOutAddressString(int thePort)
    {
        NSArray * list = [manager returnListOfOutputs];
        for (int i = 0; i < [list count]; i++){
            OSCOutPort * o = [list objectAtIndex:i];
            NSLog(@"%@",o.portLabel);
            NSLog(@"%@",o.addressString);
            
            NSLog(@"%d",o.port);
        }
        
       
        outputString = (c_str)[[manager returnAddressString:thePort]UTF8String];
        
        //return &outputString;
    }
    /*
    void getOutport1()
    {
        NSArray * list = [manager returnListOfOutputs];
        for (int i = 0; i < [list count]; i++){
            OSCOutPort * o = [list objectAtIndex:i];
            NSLog(@"%@",o.portLabel);
            NSLog(@"%@",o.addressString);
            
            NSLog(@"%d",o.port);
        }
        outPort1 = [manager returnFirstOutport];
        
        return outPort1;
    }*/
    
            // get parameter example
            float getParam() { return m_param; }
            
            
            
        private:
            // instance data
        const char* myName;
            float m_param;
            int outPort1;
            managerHandler * manager;
            std::string appName;
            int myPort;
    
            };
            
            
            // query function: chuck calls this when loading the Chugin
            // NOTE: developer will need to modify this function to
            // add additional functions to this Chugin
            CK_DLL_QUERY( Chuckjour )
            {
                // hmm, don't change this...
                QUERY->setname(QUERY, "ChuckJour");
                
                // begin the class definition
                // can change the second argument to extend a different ChucK class
                QUERY->begin_class(QUERY, "ChuckJour", "Object");
                
                // register the constructor (probably no need to change)
                QUERY->add_ctor(QUERY, chuckjour_ctor);
                // register the destructor (probably no need to change)
                QUERY->add_dtor(QUERY, chuckjour_dtor);
                
                // for UGen's only: add tick function
                // QUERY->add_ugen_func(QUERY, chuckjour_tick, NULL, 1, 1);
                
                // NOTE: if this is to be a UGen with more than 1 channel,
                // e.g., a multichannel UGen -- will need to use add_ugen_funcf()
                // and declare a tickf function using CK_DLL_TICKF
                
                // example of adding setter method
                QUERY->add_mfun(QUERY, chuckjour_setParam, "float", "param");
                // example of adding argument to the above method
                QUERY->add_arg(QUERY, "float", "arg");
                QUERY->add_mfun(QUERY, chuckjour_createInport, "int", "createInPort");
                QUERY->add_arg(QUERY, "int", "arg");
                // example of adding getter method
                QUERY->add_mfun(QUERY, chuckjour_getParam, "float", "param");
                
                QUERY->add_mfun(QUERY, chuckjour_getOutport, "int", "getOutport");
                QUERY->add_arg(QUERY, "int", "arg");
                QUERY->add_mfun(QUERY, chuckjour_getInport, "int", "getInport");
                QUERY->add_arg(QUERY, "int", "arg");
                
                /*
                QUERY->add_mfun(QUERY, chuckjour_getOutAddressString, "string", "getOutAddressString");
                QUERY->add_arg(QUERY, "int", "arg");
                */
                
                // this reserves a variable in the ChucK internal class to store
                // referene to the c++ class we defined above
                chuckjour_data_offset = QUERY->add_mvar(QUERY, "int", "@c_data", false);
                
                // end the class definition
                // IMPORTANT: this MUST be called!
                QUERY->end_class(QUERY);
                
                // wasn't that a breeze?
                return TRUE;
            }
            
            
            // implementation for the constructor
            CK_DLL_CTOR(chuckjour_ctor)
            {
                // get the offset where we'll store our internal c++ class pointer
                OBJ_MEMBER_INT(SELF, chuckjour_data_offset) = 0;
                
                // instantiate our internal c++ class representation
                Chuckjour * bcdata = new Chuckjour(API->vm->get_srate());
                
                // store the pointer in the ChucK object member
                OBJ_MEMBER_INT(SELF, chuckjour_data_offset) = (t_CKINT) bcdata;
            }
            
            
            // implementation for the destructor
            CK_DLL_DTOR(chuckjour_dtor)
            {
                // get our c++ class pointer
                Chuckjour * bcdata = (Chuckjour *) OBJ_MEMBER_INT(SELF, chuckjour_data_offset);
                // check it
                if( bcdata )
                {
                    // clean up
                    delete bcdata;
                    OBJ_MEMBER_INT(SELF, chuckjour_data_offset) = 0;
                    bcdata = NULL;
                }
            }
            
            /*
             // implementation for tick function
             CK_DLL_TICK(chuckjour_tick)
             {
             // get our c++ class pointer
             Chuckjour * c = (Chuckjour *) OBJ_MEMBER_INT(SELF, chuckjour_data_offset);
             
             // invoke our tick function; store in the magical out variable
             if(c) *out = c->tick(in);
             
             // yes
             return TRUE;
             }
             */
            
            // example implementation for setter
            CK_DLL_MFUN(chuckjour_setParam)
            {
                // get our c++ class pointer
                Chuckjour * bcdata = (Chuckjour *) OBJ_MEMBER_INT(SELF, chuckjour_data_offset);
                // set the return value
                RETURN->v_float = bcdata->setParam(GET_NEXT_FLOAT(ARGS));
            }

        CK_DLL_MFUN(chuckjour_createInport)
{
    // get our c++ class pointer
    Chuckjour * bcdata = (Chuckjour *) OBJ_MEMBER_INT(SELF, chuckjour_data_offset);
    // set the return value
    RETURN->v_int = bcdata->createInport(GET_NEXT_INT(ARGS));
}


            // example implementation for getter
            CK_DLL_MFUN(chuckjour_getParam)
            {
                // get our c++ class pointer
                Chuckjour * bcdata = (Chuckjour *) OBJ_MEMBER_INT(SELF, chuckjour_data_offset);
                // set the return value
                RETURN->v_float = bcdata->getParam();
            }

CK_DLL_MFUN(chuckjour_getOutport)
{
    // get our c++ class pointer
    Chuckjour * bcdata = (Chuckjour *) OBJ_MEMBER_INT(SELF, chuckjour_data_offset);
    // set the return value
    RETURN->v_int = bcdata->getOutport(GET_NEXT_INT(ARGS));
}

CK_DLL_MFUN(chuckjour_getInport)
{
    // get our c++ class pointer
    Chuckjour * bcdata = (Chuckjour *) OBJ_MEMBER_INT(SELF, chuckjour_data_offset);
    // set the return value
    RETURN->v_int = bcdata->getInport(GET_NEXT_INT(ARGS));
}

CK_DLL_MFUN(chuckjour_setMyName)
{
    // get our c++ class pointer
    Chuckjour * bcdata = (Chuckjour *) OBJ_MEMBER_INT(SELF, chuckjour_data_offset);
    // set the return value
    const char* q = GET_NEXT_STRING(ARGS)->str.c_str();
    const char* p = GET_NEXT_STRING(ARGS)->str.c_str();
    //RETURN->v_int = bcdata->setMyName(q,p);
}

//Work on this guy because it should almost work -- although it may require
/*
CK_DLL_MFUN(chuckjour_getOutAddressString)
{
    // get our c++ class pointer
    Chuckjour * bcdata = (Chuckjour *) OBJ_MEMBER_INT(SELF, chuckjour_data_offset);
    // set the return value
    Chuck_String * ret = (Chuck_String *) instantiate_and_initialize_object(&t_string, SHRED);
    bcdata->getOutAddressString(GET_NEXT_INT(ARGS));
    ret = (Chuck_String *)bcdata->outputString;
    RETURN->v_string = ret;
}
 */

